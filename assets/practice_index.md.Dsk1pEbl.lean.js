import{_ as r,o as e,c as o,a2 as n}from"./chunks/framework.CAv1dD81.js";const h=JSON.parse('{"title":"一句话总结","description":"","frontmatter":{},"headers":[],"relativePath":"practice/index.md","filePath":"practice/index.md","lastUpdated":1731746832000}'),t={name:"practice/index.md"};function c(i,a,l,s,d,u){return e(),o("div",null,a[0]||(a[0]=[n('<h1 id="一句话总结" tabindex="-1">一句话总结 <a class="header-anchor" href="#一句话总结" aria-label="Permalink to &quot;一句话总结&quot;">​</a></h1><h2 id="_1、未定义的变量会报错-但对象下的未定义属性不会报错" tabindex="-1">1、未定义的变量会报错，但对象下的未定义属性不会报错 <a class="header-anchor" href="#_1、未定义的变量会报错-但对象下的未定义属性不会报错" aria-label="Permalink to &quot;1、未定义的变量会报错，但对象下的未定义属性不会报错&quot;">​</a></h2><h2 id="_2、var-声明的变量不赋值为undefined-const声明必须赋值否则会报错" tabindex="-1">2、var 声明的变量不赋值为undefined，const声明必须赋值否则会报错 <a class="header-anchor" href="#_2、var-声明的变量不赋值为undefined-const声明必须赋值否则会报错" aria-label="Permalink to &quot;2、var 声明的变量不赋值为undefined，const声明必须赋值否则会报错&quot;">​</a></h2><h2 id="_3、对象中-作为取值时可以用-代替" tabindex="-1">3、对象中<code>.</code>作为取值时可以用<code>[]</code>代替 <a class="header-anchor" href="#_3、对象中-作为取值时可以用-代替" aria-label="Permalink to &quot;3、对象中`.`作为取值时可以用`[]`代替&quot;">​</a></h2><h2 id="_4、javascript是一门面向对象的语言" tabindex="-1">4、JavaScript是一门面向对象的语言 <a class="header-anchor" href="#_4、javascript是一门面向对象的语言" aria-label="Permalink to &quot;4、JavaScript是一门面向对象的语言&quot;">​</a></h2><h2 id="_5、可以使用json-stringify-object-null-2-对字符串转换成json进行格式化-最后一个参数表示缩进。否则会显示一行" tabindex="-1">5、可以使用JSON.stringify(object,null,2)对字符串转换成json进行格式化，最后一个参数表示缩进。否则会显示一行 <a class="header-anchor" href="#_5、可以使用json-stringify-object-null-2-对字符串转换成json进行格式化-最后一个参数表示缩进。否则会显示一行" aria-label="Permalink to &quot;5、可以使用JSON.stringify(object,null,2)对字符串转换成json进行格式化，最后一个参数表示缩进。否则会显示一行&quot;">​</a></h2><h2 id="_6、一般想到数字的字符串排序方法-我们会用到-var-newarr-arr-sort-function-a-b-return-a-b-来进行排序-但除此之外我们会需要进行一些字符串的排序-此时我们可以用到-var-newarr-arr-sort-function-a-b-return-a-localecompare-b-来进行排序-但中文排序时发现不是我们想要的-可以通过加参数的方法-a-localecompare-b-zh-cn-这样就ojbk了" tabindex="-1">6、一般想到数字的字符串排序方法 我们会用到 <code>var newArr = arr. sort(function(a,b){return a - b})</code>来进行排序，但除此之外我们会需要进行一些字符串的排序 此时我们可以用到 <code>var newArr = arr.sort(function(a,b){return a.localeCompare(b)})</code>来进行排序，但中文排序时发现不是我们想要的 可以通过加参数的方法 a.localeCompare(b,&#39;zh-CN&#39;)这样就ojbk了 <a class="header-anchor" href="#_6、一般想到数字的字符串排序方法-我们会用到-var-newarr-arr-sort-function-a-b-return-a-b-来进行排序-但除此之外我们会需要进行一些字符串的排序-此时我们可以用到-var-newarr-arr-sort-function-a-b-return-a-localecompare-b-来进行排序-但中文排序时发现不是我们想要的-可以通过加参数的方法-a-localecompare-b-zh-cn-这样就ojbk了" aria-label="Permalink to &quot;6、一般想到数字的字符串排序方法 我们会用到 `var newArr = arr. sort(function(a,b){return a - b})`来进行排序，但除此之外我们会需要进行一些字符串的排序 此时我们可以用到 `var newArr = arr.sort(function(a,b){return a.localeCompare(b)})`来进行排序，但中文排序时发现不是我们想要的  可以通过加参数的方法  a.localeCompare(b,&#39;zh-CN&#39;)这样就ojbk了&quot;">​</a></h2>',7)]))}const f=r(t,[["render",c]]);export{h as __pageData,f as default};
